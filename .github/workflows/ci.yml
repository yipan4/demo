name: CI
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      # Run the app, but don't fail the job yet; capture logs
      - name: Run app (expected to fail first run)
        id: runapp
        continue-on-error: true
        run: |
          set +e
          python app/app.py > run.out 2> run.err
          code=$?
          echo "exit_code=$code" >> $GITHUB_OUTPUT
          # Explicitly set outcome based on the exit code
          if [ $code -ne 0 ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi
          echo "err<<EOF" >> $GITHUB_OUTPUT
          tail -n 120 run.err >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Use Azure OpenAI to generate a dynamic summary
      - name: Summarize result with Azure OpenAI
        if: steps.runapp.outputs.status == 'failure'
        id: ai
        env:
          AOAI_ENDPOINT: ${{ secrets.AOAI_ENDPOINT }}
          AOAI_KEY: ${{ secrets.AOAI_KEY }}
          AOAI_DEPLOYMENT: ${{ secrets.AOAI_DEPLOYMENT }}
          OUTCOME: ${{ steps.runapp.outcome }}
        run: |
          # Set and export environment variables for the Python script to use
          export STATUS="${OUTCOME}"
          # Use exit code as a more reliable indicator
          if [ "${{ steps.runapp.outputs.exit_code }}" != "0" ]; then
            export STATUS="failure"
            export CONTEXT="${{ steps.runapp.outputs.err }}"
          else
            export STATUS="success"
            export CONTEXT="Build passed. Dependencies OK."
          fi

          # Build a clear prompt
          cat > prompt.txt <<'P'
          # Role: 
          You are an expert CI assistant helping developers fix build failures. 
          ## Task:
          Analyze the build outcome and error logs to:

          1. ISSUE: Clearly identify the specific error or problem in concise sentences
          2. CAUSE: Explain the root cause of the issue (e.g., missing dependency, syntax error)
          3. FIX: Provide specific, ready-to-use fix command or code change
          4. NEXT: Suggest follow-up actions the developer should take after applying the fix

          For successful builds, confirm what's working correctly and any optional improvements.
          Keep your response under 6 lines for each section and prioritize accuracy over verbosity.
          P

          # Execute the external Python script and capture the output
          # The script will print to GITHUB_OUTPUT format with the summary<<EOF syntax
          python ai/generate_summary.py >> $GITHUB_OUTPUT

      - name: Notify Power Automate (Teams) about result
        if: always()
        env:
          FLOW_URL: ${{ secrets.PA_FLOW_URL }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          OUTCOME: ${{ steps.runapp.outputs.status || steps.runapp.outcome }}
          AI_SUMMARY: ${{ steps.ai.outputs.summary }}
        run: |
          set -Eeuo pipefail

          STATUS="${OUTCOME}"
          if [[ "$STATUS" == "failure" ]]; then
            TITLE="CI Failure"
            COLOR="D93F0B"
          else
            TITLE="CI Success"
            COLOR="36A64F"
          fi

          # Use the AI summary or a default fallback
          TEXT="${AI_SUMMARY:-N/A}"

          # (Optional) Normalize CRLF just in case
          TEXT="${TEXT//$'\r'/}"

          # Build JSON safely with jq (handles newlines and quotes)
          JSON_PAYLOAD=$(jq -n \
            --arg title "$TITLE: $REPO ($BRANCH)" \
            --arg text "$TEXT" \
            --arg color "$COLOR" \
            --arg run_url "$RUN_URL" \
            --arg repo "$REPO" \
            --arg branch "$BRANCH" \
            --arg status "$STATUS" \
            '{title:$title, text:$text, color:$color, run_url:$run_url, repo:$repo, branch:$branch, status:$status}')

          # (Optional) Validate JSON locally (will exit nonâ€‘zero on invalid JSON)
          jq -e . >/dev/null <<< "$JSON_PAYLOAD"

          # Send to Power Automate (URL contains auth)
          curl -sSf -H "Content-Type: application/json" --data "$JSON_PAYLOAD" "$FLOW_URL" || true

      # Keep run status accurate (first run should be red)
      - name: Enforce failure if app failed
        if: steps.runapp.outputs.status == 'failure'
        run: exit 1
